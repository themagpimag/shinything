Controlling Steeper motor by Rotary EncoderProblem of speed control:The other day we had a big problem. The Saddle feeder's speed control was done by a hydraulic device which consists of a wheel having a complete 360 degree rotation representing from zero speed to maximum speed. The operator climbs the ladder set the wheel , lock it and then came back to the other platform and run the feeder for feeding coal to the bunker. Till now the Saddle feeders used to run at highest speed to deliver maximum coal to the bunkers for producing electricity but ever since the coal started arriving from Indonesia the operator need to modulate the speed of these Saddle feeders as the demand from boiler is reduced due to very high calorific value of these imported coal. Therefore, he needs to climb the ladder many times in a day to readjust the speed. He demands an easy solution to these difficult speed setting job.Raspberry Pi in action:Well, here is the solution based on Raspberry Pi using a rotary encoder and driving a powerful stepper motor directly mounted on the hydraulic disc. The rotary encoder is an easy , efficient yet cheap device for creating directional rotation in digital format. A typical rotary encoder has 3 or more leads , while rotating the knob the common lead goes on touching the other leads sequentially . The common lead goes to the ground. Thus by just following which lead becomes ground after what ,a direction of rotation is established and a counter is incremented at the same time as a measurement of rotation along that direction.So measurement is the first step towards solution. After measuring the small movements of the rotary encoder we feed that reading in the steeper motor for making the same amount of stepped movement to rotate the hydraulic disc and the speed changes. So easy as if pushing a hill by a small twisting of the rotary encoder. The same technique can be employed for making fine tune of the alignment of telescope focus mechanism, direction of a disc antenna to readjust satellite drifting , mast of a crane for placing it on the load and many more.  That's a 3 wire rotary encoder. The cost is barely Rs:200 from mail order shops in India. The red wire is the common lead while the blue wires are the two points Ð A & B. see schematic for detail.The schematic of connections are like this..Well, here's the PHP program for the entire set up. The rotary encoder is connected to the physical pin 12 & 15 while the central pin goes to the ground pin no 6. The stepper motor is connected to the  pins 16,18,24,26 (GPIO pin-7,8,23,24 ) . The chip used is L293 dual H bridge , the motor enable pin is left disconnected as for stepper motors they are not required. However, a ULN2003 Ð the Darlington IC can also be used for this project. And the PHP script.--- rotary-servo.php ------<?phprequire_once('GPIO.php');include("wiringpi.php");// rotary-encoder is connected to pinmode pin 1,2 means physical pin 12,15// Stepper motor is connected to physical pin 16,18,24,26$g[0] = new GPIO();$g[1] = new GPIO();$g[2] = new GPIO();$g[3] = new GPIO();$g[0]->setup(7, "out");$g[1]->setup(8,"out");$g[2]->setup(23,"out");$g[3]->setup(24,"out");$x1= $y1 =$z1=0;$step = 200;$rev=16;$angle = 0;$val = 0;$encoderpos = 0;$encoderalast = 0;$encodera;pinMode(1,1);pinMode(2,1);digitalWrite(1,1);digitalWrite(2,1);for (;;){$encodera= digitalRead(1);  if( ($encoderalast==1) && ($encodera==0) ) {    if(digitalRead(2)==0) {          $y1 = $encoderpos;          $dir ='-';          $encoderpos=$encoderpos-1;    }    else    {      $x1 = $encoderpos;      $dir ='+';      $encoderpos=$encoderpos+1;    }    $angle=($encoderpos % $rev)*360/$rev;$x=3000;$step=$angle/7.2;$z1=$x1/7.2;printf("\n Encoder Position: %3d Step:%5.2f Rotate pos:$dir",$angle,$step,$dir);if($dir=='+') goto F;if($dir=='-') goto R;F:for($i=$x1;$i<=$x1+1;$i++) {seq5: {$g[3]->output(23,0);$g[2]->output(7,0);$g[1]->output(24,0);$g[0]->output(8,1);usleep($x);}seq6: {$g[3]->output(23,0);$g[2]->output(7,0);$g[1]->output(24,1);$g[0]->output(8,0);usleep($x);}seq7: {$g[0]->output(23,0);$g[2]->output(7,1);$g[1]->output(24,0);$g[3]->output(8,0);usleep($x);}seq8: {$g[3]->output(23,1);$g[2]->output(7,0);$g[1]->output(24,0);$g[0]->output(8,0);usleep($x);}}goto end;R:for($i=$y1;$i<=$y1+1;$i++) {seq1: {$g[3]->output(23,1);$g[2]->output(7,0);$g[1]->output(24,0);$g[0]->output(8,0);usleep($x);}seq2: {$g[3]->output(23,0);$g[2]->output(7,1);$g[1]->output(24,0);$g[0]->output(8,0);usleep($x);}seq3: {$g[0]->output(23,0);$g[2]->output(7,0);$g[1]->output(24,1);$g[3]->output(8,0);usleep($x);}seq4: {$g[3]->output(23,0);$g[2]->output(7,0);$g[1]->output(24,0);$g[0]->output(8,1);usleep($x);}}end:}$encoderalast=$encodera;}?>------------ end of php program -------S. Beravindhyanagar.